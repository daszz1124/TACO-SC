Traceback (most recent call last):
  File "datasets2vector.py", line 1, in <module>
    from mmeb_model import loading_processor, model_args
  File "/home/iisc/zsd/project/VG2SC/TACO/mmeb_model.py", line 12, in <module>
    import torch
ModuleNotFoundError: No module named 'torch'
06/22/2025 14:59:17 - INFO - datasets -   PyTorch version 2.4.0 available.
06/22/2025 14:59:17 - INFO - src.utils -   Loading processor
06/22/2025 14:59:18 - INFO - src.utils -   Loading backbone [qwen2_vl]
You are attempting to use Flash Attention 2.0 with a model not initialized on GPU. Make sure to move the model to GPU after initializing it on CPU with `model.to('cuda')`.
Loading checkpoint shards:   0%|          | 0/2 [00:00<?, ?it/s]Loading checkpoint shards:  50%|█████     | 1/2 [00:00<00:00,  3.41it/s]Loading checkpoint shards: 100%|██████████| 2/2 [00:00<00:00,  4.12it/s]Loading checkpoint shards: 100%|██████████| 2/2 [00:00<00:00,  3.99it/s]
/home/iisc/anaconda3/envs/vlm2vec_sc/lib/python3.10/site-packages/peft/utils/save_and_load.py:446: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  adapters_weights = torch.load(filename, map_location=torch.device(device))
Encode query:   0%|          | 0/1 [00:00<?, ?it/s]You're using a Qwen2TokenizerFast tokenizer. Please note that with a fast tokenizer, using the `__call__` method is faster than using a method to encode the text followed by a call to the `pad` method to get a padded encoding.
Encode query: 100%|██████████| 1/1 [00:02<00:00,  2.16s/it]Encode query: 100%|██████████| 1/1 [00:02<00:00,  2.25s/it]
